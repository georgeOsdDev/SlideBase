// Generated by CoffeeScript 1.3.3
(function() {
  var Server, config, connect, exports, express, http, log, path, router, util, _;

  express = require('express');

  http = require('http');

  path = require('path');

  connect = require('connect');

  _ = require('underscore');

  util = require('./slideBaseUtil');

  router = require('./router');

  log = console.log;

  config = util.getConfig();

  Server = {
    createServer: function(sessionStore) {
      var app, routingList;
      app = express();
      app.configure(function() {
        var _ref, _ref1;
        app.set('title', 'SlideBase');
        app.set('port', ((_ref = process.env) != null ? _ref.PORT : void 0) || ((_ref1 = config.server) != null ? _ref1.port : void 0) || 3000);
        app.use(express.favicon());
        app.set('views', __dirname + '/../views');
        app.set('view engine', 'ejs');
        app.use(util.parallel(express.bodyParser(), express.cookieParser()));
        app.use(util.parallel(express.methodOverride(), express.session({
          store: sessionStore,
          secret: config.session.secret,
          maxAge: false,
          cookie: {
            httpOnly: false
          }
        })));
        app.use(express.logger('dev'));
        app.use(express["static"](path.join(__dirname, '/../public')));
        app.use(app.router);
        app.use(function(err, req, res, next) {
          console.error(err.stack);
          res.status(500);
          return res.render("err", {
            status: 500,
            title: "500 Internal Server Error"
          });
        });
        return app.use(function(req, res, next) {
          res.status(404);
          return res.render("err", {
            status: 404,
            title: "404 Page Not Found"
          });
        });
      });
      app.configure('development', function() {
        return app.use(express.errorHandler({
          dumpExceptions: true,
          showStack: true
        }));
      });
      app.configure('production', function() {
        return app.use(express.errorHandler());
      });
      routingList = router.getRoutingList();
      _.each(routingList["GET"], function(pathList, route) {
        return _.each(pathList, function(path) {
          return app.get(path, router[route]);
        });
      });
      _.each(routingList["POST"], function(pathList, route) {
        return _.each(pathList, function(path) {
          return app.post(path, router[route]);
        });
      });
      log("Express server listening on port " + (app.get('port')) + " in " + app.settings.env);
      log("Go http://" + (process.env.VCAP_APP_HOST || 'localhost') + ":" + (app.get('port')) + "/");
      return http.createServer(app).listen(app.get('port'));
    }
  };

  module.exports = exports = Server;

}).call(this);
