// Generated by CoffeeScript 1.3.3
(function() {
  var SlideBase, activeUser, config, exports, log, slideBaseUtil, socketIO, store, users, _;

  socketIO = require('socket.io');

  _ = require('underscore');

  slideBaseUtil = require('./slideBaseUtil');

  log = console.log;

  config = slideBaseUtil.getConfig();

  store = slideBaseUtil.getSessionStore();

  users = [];

  activeUser = 0;

  SlideBase = {
    self: function() {
      return this;
    },
    createServer: function() {
      var server;
      server = require('./server.js');
      return server.createServer(store);
    },
    setUpSlideBase: function(server) {
      var io, self;
      self = this.self();
      io = socketIO.listen(server);
      io.configure(function() {
        io.set('authorization', function(handshakeData, callback) {
          var cookie, sessionID, singedCookie;
          if (handshakeData.headers.cookie) {
            singedCookie = slideBaseUtil.parseCookie(decodeURIComponent(handshakeData.headers.cookie));
            cookie = slideBaseUtil.parseSignedCookies(singedCookie);
            sessionID = cookie['connect.sid'];
            return store.get(sessionID, function(err, session) {
              if (err) {
                log("err", err);
                return callback(err.message, false);
              } else if (!session) {
                return callback("session not found", false);
              } else {
                log("session found");
                handshakeData.cookie = cookie;
                handshakeData.sessionID = sessionID;
                handshakeData.session = session;
                return callback(null, true);
              }
            });
          } else {
            return callback("cookie not found", true);
          }
        });
        io.enable('browser client minification');
        io.enable('browser client etag');
        io.set('transports', ['websocket']);
        return io.set('log level', 1);
      });
      io.configure('production', function() {
        io.set('log level', 1);
        return io.set('transports', ['websocket', 'flashsocket', 'htmlfile', 'xhr-polling', 'jsonp-polling']);
      });
      return io.sockets.on('connection', function(socket) {
        var user;
        log("new user is connected");
        self.activeUser++;
        user = {
          id: socket.id,
          sts: "active"
        };
        users.push(user);
        io.sockets.emit("users", users);
        socket.on('message', function(data) {
          return socket.broadcast.volatile.emit("message", data);
        });
        socket.on('move', function(data) {
          if (slideBaseUtil.isAdmin(socket)) {
            return socket.broadcast.volatile.emit("move", data);
          }
        });
        socket.on('plugin', function(data) {
          if (data.plugin.name = 'gaya') {
            log(data.data);
          }
          return socket.broadcast.volatile.emit("plugin", data);
        });
        socket.on('heartbeat', function() {
          return log(" " + socket.id + " is alive");
        });
        socket.on('disconnect', function() {
          log("user:" + socket.id + " was disconnected");
          this.users.socket.id = {};
          return socket.broadcast.volatile.emit("users", users);
        });
        return socket.on('error', function(event) {
          return console.error("Error occured", event);
        });
      });
    },
    startSlide: function() {
      return this.setUpSlideBase(this.createServer());
    }
  };

  module.exports = exports = SlideBase;

}).call(this);
