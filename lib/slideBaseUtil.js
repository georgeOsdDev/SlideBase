// Generated by CoffeeScript 1.3.3
(function() {
  var RedisStore, Util, config, connect, cookie, crypto, env, exports, express, fs, util, _;

  util = require('util');

  fs = require('fs');

  _ = require('underscore');

  express = require('express');

  connect = require('connect');

  cookie = require('cookie');

  crypto = require('crypto');

  RedisStore = require('connect-redis')(express);

  env = process.env.NODE_ENV;

  config = env ? require("../config/" + env + ".json") : require("../config/default.json");

  Util = {
    getConfig: function() {
      return config;
    },
    encrypt: function(input) {
      var cipher, encrypted;
      cipher = crypto.createCipher('aes192', getConfig.encKey);
      encrypted = cipher.update(input, 'utf8', 'hex');
      return encrypted += cipher.final('hex');
    },
    decrypt: function(encrypted) {
      var decipher, decrypted;
      decipher = crypto.createDecipher('aes192', getConfig.encKey);
      decrypted = decipher.update(encrypted, 'hex', 'utf8');
      return decrypted += decipher.final('utf8');
    },
    getHash: function(input) {
      return crypto.createHash('sha1').update(input).digest('hex');
    },
    adminAuth: function(user, pass) {
      return user === config.admin.user && this.getHash(pass) === config.admin.pass;
    },
    isAdmin: function(socket) {
      if (socket.handshake.session && socket.handshake.session.admin) {
        return true;
      } else {
        return false;
      }
    },
    setCookie: function(res, key, val) {
      var option;
      option = {
        path: "/",
        expires: new Date(Date.now() + 1000 * 60 * 60 * 24 * 1)
      };
      return res.cookie(key, val, option);
    },
    getSessionStore: function() {
      switch (env) {
        case "development":
        case "test":
          return new connect.session.MemoryStore();
        case "production":
          return new RedisStore({
            db: 1,
            prefix: 'sessions'
          });
        default:
          return new connect.session.MemoryStore();
      }
    },
    parseCookie: function(target) {
      return cookie.parse(target);
    },
    parseSignedCookies: function(singedCookie) {
      return connect.utils.parseSignedCookies(singedCookie, config.session.secret);
    },
    serializeCookie: function(obj) {
      return cookie.serialize(obj);
    },
    getAuthCookie: function() {
      return connect.utils.uid(32);
    },
    getSlides: function() {
      return fs.readdirSync(__dirname + '/../public/slides');
    },
    parallel: function() {
      var list;
      list = arguments;
      return function(req, res, next) {
        var current, func, _i, _len, _results;
        current = 0;
        _results = [];
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          func = list[_i];
          _results.push(func(req, res, function() {
            if (++current === list.length) {
              return next();
            }
          }));
        }
        return _results;
      };
    }
  };

  module.exports = exports = Util;

}).call(this);
