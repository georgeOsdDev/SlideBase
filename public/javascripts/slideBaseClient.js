// Generated by CoffeeScript 1.3.3

/*
SlideBaseClient.js
------------------------------------------------
author:  [Takeharu Oshida](http://about.me/takeharu.oshida)
version: 0.1
licence: [MIT](http://opensource.org/licenses/mit-license.php)
*/


(function() {
  var socket;

  console.log("This is Client Side Script");

  window.sbClient = {
    admin: false,
    lock: false,
    page: {
      current: 0,
      last: null
    },
    Model: {},
    Collection: {},
    View: {},
    Instances: {},
    option: {
      animation: '',
      theme: 'default'
    },
    plugins: {},
    pushMethods: {
      'move': true
    },
    isDisplayHelp: false,
    userList: {},
    init: function(opts) {
      var ctl, help, wrap;
      if (opts == null) {
        opts = {};
      }
      _.each(opts, function(val, key) {
        return sbClient.option[key] = val;
      });
      wrap = document.createElement('div');
      wrap.id = 'wrap';
      wrap.display = 'none';
      ctl = document.createElement('div');
      ctl.id = 'ctl';
      $(ctl).addClass('ctl').append("<button class='btn' id='back'>&larr;</button><button class='btn' id='next'>&rarr;</button>");
      help = document.createElement('div');
      help.id = 'help';
      $(help).addClass('help hide').append("<h4 id='usage'><span id='close'>âœ–</span>&nbsp;Usage</h4>");
      $('body').append(wrap).append(ctl).append(help);
      $('#close').bind('click', function() {
        $('#help').addClass('hide');
        return sbClient.isDisplayHelp = false;
      });
      return this.Instances.slideView = new sbClient.View.Slide();
    },
    resizeSlide: function() {
      return $('.slide').each(function() {
        return $(this).css({
          'height': $(window).height() - 72,
          'width': $(window).width() - 72
        });
      });
    },
    execEmit: function(name, data) {
      var obj;
      console.log("execEmit " + name);
      obj = {
        name: 'plugin',
        plugin: {
          name: name
        },
        data: data
      };
      return $('body').trigger('execEmit', obj);
    },
    isEnableServerPush: function(method) {
      return this.pushMethods[method];
    },
    isEnablePlugin: function(obj) {
      if (!obj.plugin || !obj.plugin.name) {
        return false;
      }
      return this.isEnableServerPush(obj.plugin.name);
    },
    move: function(obj) {
      if (this.isEnableServerPush('move')) {
        return this.Instances.slideView.trigger('execMove', obj.data);
      }
    },
    setUserList: function(userList) {
      return this.userList = userList;
    },
    nextSlide: function(slide) {
      var tmp;
      tmp = document.createElement('div');
      tmp.id = "slide_" + (slide.get('page'));
      return $(tmp).addClass(slide.get('class')).addClass('slide current').append(slide.get('elements'));
    },
    simpleMove: function(slide) {
      var next;
      next = this.nextSlide(slide);
      $('#wrap').empty().removeClass().append(next);
      this.resizeSlide();
      return this.lock = false;
    },
    fadeMove: function(slide) {
      var next;
      next = this.nextSlide(slide);
      $('#wrap').fadeOut(250, function() {
        $('#wrap').empty().removeClass().append(next);
        return sbClient.resizeSlide();
      });
      return $('#wrap').fadeIn(500, function() {
        return this.lock = false;
      });
    },
    positionMove: function(x, y, z, direction, nextpage) {
      if (direction < 0) {
        direction += 1;
      }
      return $('#wrap > .slide').each(function(i, e) {
        var css, xx, yy, zz;
        xx = x * (i - nextpage);
        yy = y * (i - nextpage);
        zz = z * (i - nextpage);
        css = {
          "transform": "translate3d(" + xx + "px," + yy + "px," + zz + "px)"
        };
        return $(e).css(css);
      });
    },
    horizontalMove: function(direction, nextpage) {
      this.positionMove($(window).width(), 0, 0, direction, nextpage);
      return this.lock = false;
    },
    verticalMove: function(direction, nextpage) {
      this.positionMove(0, $(window).height(), 0, direction, nextpage);
      return this.lock = false;
    }
  };

  sbClient.Model.Slide = Backbone.Model.extend({
    elements: '',
    "class": '',
    page: ''
  });

  sbClient.Collection.Slides = Backbone.Collection.extend({
    model: sbClient.Model.Slide,
    fetch: function() {
      var self;
      self = this;
      _($('section')).each(function(section, index) {
        var slide;
        slide = new sbClient.Model.Slide({
          elements: $(section).contents(),
          "class": $(section).attr('class'),
          page: index
        });
        self.add(slide);
        return $(section).remove();
      });
      sbClient.page.last = self.length;
      return self.trigger('ready');
    }
  });

  sbClient.View.Slide = Backbone.View.extend({
    el: $('body'),
    initialize: function() {
      var self;
      self = this;
      self.collection = new sbClient.Collection.Slides();
      _.bindAll(this, 'render', 'dispHelp', 'moveSlide', 'handleKey');
      self.$el.bind('keydown', self.handleKey);
      self.$el.bind('swipeleft', self.moveSlide(1));
      self.$el.bind('swiperight', self.moveSlide(-1));
      $('#next').bind('click', function() {
        return self.moveSlide(1);
      });
      $('#back').bind('click', function() {
        return self.moveSlide(-1);
      });
      self.on('execMove', function(event) {
        var args, data;
        args = Array.prototype.slice.apply(arguments);
        data = args[0];
        if (data.currentPage === sbClient.page.current) {
          return self.moveSlide(data.direction);
        }
      });
      self.collection.on('ready', function() {
        return self.render();
      });
      return self.collection.fetch();
    },
    render: function() {
      var append, appendAll, self;
      self = this;
      append = function(className, page, css) {
        var id, slide, tmp;
        slide = (self.collection.where({
          page: page
        }))[0];
        id = slide.get('page');
        tmp = document.createElement('div');
        tmp.id = "slide_" + id;
        $(tmp).addClass(className).addClass(slide.get('class')).append(slide.get('elements'));
        if (css) {
          $(tmp).css(css);
        }
        sbClient.resizeSlide();
        return $("#wrap").append($(tmp));
      };
      appendAll = function(x, y, z) {
        return self.collection.each(function(slide, i) {
          var css;
          css = {
            "transform": "translate3d(" + (x * i) + "px," + (y * i) + "px," + (z * i) + "px)"
          };
          if (i === 0) {
            append("slide current transform", 0, css);
            return location.hash = i;
          } else {
            return append("slide transform", i, css);
          }
        });
      };
      switch (sbClient.option.animation) {
        case 'horizontal':
          appendAll($(window).width(), 0, 0);
          break;
        case 'vertical':
          appendAll(0, $(window).height(), 0);
          break;
        case 'fade':
          append('slide current', 0);
          break;
        default:
          append('slide current', 0);
      }
      return sbClient.lock = false;
    },
    handleKey: function(event) {
      var alt, cmd, code, ctrl, shift;
      code = event.keyCode || event.which;
      ctrl = event.ctrlKey;
      alt = event.altKey;
      shift = event.shiftKey;
      cmd = event.metaKey;
      if ((code === 32) || (code === 39)) {
        if (sbClient.isDisplayHelp) {
          return;
        }
        event.preventDefault;
        this.moveSlide(1);
      }
      if ((code === 8) || (code === 37)) {
        if (sbClient.isDisplayHelp) {
          return;
        }
        event.preventDefault;
        this.moveSlide(-1);
      }
      if ((ctrl || cmd) && shift && code === 191) {
        event.preventDefault;
        return this.dispHelp();
      }
    },
    moveSlide: function(direction) {
      var next, nextpage, obj, self;
      self = this;
      if (sbClient.lock) {
        return;
      }
      nextpage = sbClient.page.current + direction;
      next = self.collection.at(nextpage);
      if (next) {
        obj = {
          name: 'move',
          data: {
            direction: direction,
            currentPage: sbClient.page.current
          }
        };
        $('body').trigger('execEmit', obj);
        sbClient.lock = true;
        switch (sbClient.option.animation) {
          case 'horizontal':
            sbClient.horizontalMove(direction, nextpage);
            break;
          case 'vertical':
            sbClient.verticalMove(direction, nextpage);
            break;
          case 'fade':
            sbClient.fadeMove(next);
            break;
          default:
            sbClient.simpleMove(next);
        }
        sbClient.page.current = nextpage;
        location.hash = sbClient.page.current;
        return sbClient.lock = false;
      }
    },
    dispHelp: function() {
      console.log("Help!");
      if (sbClient.isDisplayHelp) {
        $('#help').removeClass('disp').addClass('hide');
        return sbClient.isDisplayHelp = false;
      } else {
        $('#help').removeClass('hide').addClass('disp');
        return sbClient.isDisplayHelp = true;
      }
    }
  });

  sbClient.Model.Plugin = Backbone.Model.extend({
    defaults: {
      id: '',
      name: '',
      callback: '',
      element: '',
      initialScript: function() {}
    },
    initialize: function() {
      var self;
      self = this;
      return $(function() {
        var name, script;
        name = self.get('name');
        sbClient.plugins[name] = self;
        sbClient.pushMethods[name] = true;
        $('#help').append(self.get('element'));
        script = self.get('initialScript') || {};
        return script();
      });
    }
  });

  socket = typeof io !== "undefined" && io !== null ? io.connect("http://" + location.host) : void 0;

  if (socket != null) {
    socket.on('error', function(reason) {
      return console.error('Unable to connect Socket.IO', reason);
    });
  }

  if (socket != null) {
    socket.on('connect', function() {
      console.log('client connected');
      $('body').on('execEmit', function(event, obj) {
        return socket.emit(obj.name, obj);
      });
      socket.on('users', function(userList) {
        return sbClient.setUserList(userList);
      });
      socket.on('move', function(obj) {
        return sbClient.move(obj);
      });
      socket.on('plugin', function(obj) {
        var func;
        if (sbClient.isEnablePlugin(obj)) {
          func = sbClient.plugins[obj.plugin.name].get("callback") || {};
          return func(obj.data);
        }
      });
      return socket.on('disconnect', function() {
        $('body').off('execEmit');
        return console.log('disconnected Bye!');
      });
    });
  }

  $(function() {
    sbClient.resizeSlide();
    $(window).bind('resize', function() {
      return sbClient.resizeSlide();
    });
    return $('a').bind('click', function(e) {
      e.stopPropagation();
      e.preventDefault();
      return window.open(this.href, '_blank');
    });
  });

}).call(this);
