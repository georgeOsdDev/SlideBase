// Generated by CoffeeScript 1.3.3

/*
SlideBaseClient.js
------------------------------------------------
author:  [Takeharu Oshida](http://about.me/takeharu.oshida)
version: 0.1
licence: [MIT](http://opensource.org/licenses/mit-license.php)
*/


(function() {
  var fadeMove, horizontalMove, isEnableServerPush, move, resizeSlide, setUserList, slideMove, socket, verticalMove;

  console.log("This is Client Side Script");

  window.sbClient = {
    admin: false,
    lock: false,
    page: {
      current: 0,
      last: null
    },
    Model: {},
    Collection: {},
    View: {},
    option: {
      animation: 'fade',
      theme: 'default'
    },
    plugins: {},
    pushMethods: {
      'serverpush': true,
      'move': true
    },
    isDisplayHelp: false,
    userList: {},
    init: function(opts) {
      var ctl, help, pluginsView, slideView, wrap;
      if (opts == null) {
        opts = {};
      }
      _.each(opts, function(val, key) {
        return sbClient.option[key] = val;
      });
      wrap = document.createElement('div');
      wrap.id = 'wrap';
      wrap.display = 'none';
      ctl = document.createElement('div');
      ctl.id = 'ctl';
      $(ctl).addClass('ctl');
      $(ctl).append("<button class='btn' id='back'>&larr;</button><button class='btn' id='next'>&rarr;</button>");
      help = document.createElement('div');
      help.id = 'help';
      $(help).addClass('help');
      $(help).addClass('hide');
      $(help).append("<p id='plgunsHead'>Plugins</p>");
      $('body').append(wrap);
      $('body').append(ctl);
      $('body').append(help);
      $('#plgunsHead').bind('click', function() {
        $('#help').addClass('hide');
        return sbClient.isDisplayHelp = false;
      });
      slideView = new sbClient.View.SlideView();
      return pluginsView = new sbClient.View.PluginView();
    },
    execEmit: function(name, data) {
      var obj;
      console.log("execEmit " + name);
      obj = {
        name: 'plugin',
        plugin: {
          name: name
        },
        data: data
      };
      return $('body').trigger('execEmit', obj);
    }
  };

  isEnableServerPush = function(methodName) {
    return sbClient.pushMethods.serverpush === true && sbClient.pushMethods[methodName] === true;
  };

  setUserList = function(userList) {
    return sbClient.userList = userList;
  };

  move = function(data) {
    return $('body').trigger('execMove', data);
  };

  sbClient.Model.Slide = Backbone.Model.extend({
    elements: '',
    page: ''
  });

  sbClient.Collection.Slides = Backbone.Collection.extend({
    model: sbClient.Model.Slide
  });

  sbClient.View.SlideView = Backbone.View.extend({
    el: $('body'),
    initialize: function() {
      var num, self;
      this.collection = new sbClient.Collection.Slides();
      num = 0;
      self = this;
      _.bindAll(this, 'render', 'dispHelp', 'moveSlide', 'execMove', 'handleKey');
      self.$el.bind('keydown', self.handleKey);
      self.$el.bind('swipeleft', self.moveSlide(1));
      self.$el.bind('swiperight', self.moveSlide(-1));
      $('#next').bind('click', function() {
        return self.moveSlide(1);
      });
      $('#back').bind('click', function() {
        return self.moveSlide(-1);
      });
      $('body').on('execMove', function(event, obj) {
        return self.execMove(obj.data);
      });
      _($(self.el).find('section')).each(function(section) {
        var slide;
        slide = new sbClient.Model.Slide({
          elements: $(section).children(),
          page: num
        });
        self.collection.add(slide);
        return num++;
      });
      sbClient.page.last = num;
      return self.render();
    },
    render: function() {
      var append, appendAll, self;
      self = this;
      append = function(className, page, css) {
        var id, slide, tmp;
        slide = self.collection.at(page);
        id = slide.get('page');
        tmp = document.createElement('div');
        tmp.id = "slide_" + id;
        $(tmp).addClass(className).append(slide.get('elements'));
        if (css) {
          $(tmp).css(css);
        }
        resizeSlide();
        return $("#wrap").append($(tmp));
      };
      appendAll = function(x, y, z) {
        $("#wrap").addClass("transform");
        return self.collection.each(function(slide, i) {
          var css;
          css = {
            "transform": "translate3d(" + (x * i) + "px," + (y * i) + "px," + (z * i) + "px)"
          };
          if (i === 0) {
            return append("slide current transform", 0, css);
          } else {
            return append("slide transform", i, css);
          }
        });
      };
      switch (sbClient.option.animation) {
        case 'horizontal':
          appendAll($(window).width(), 0, 0);
          break;
        case 'vertical':
          appendAll(0, $(window).height(), 0);
          break;
        case 'fade':
          append('slide current', 0);
          break;
        default:
          append('slide current', 0);
      }
      return sbClient.lock = false;
    },
    handleKey: function(event) {
      var alt, cmd, code, ctrl, shift;
      code = event.keyCode || event.which;
      ctrl = event.ctrlKey;
      alt = event.altKey;
      shift = event.shiftKey;
      cmd = event.metaKey;
      if ((code === 32) || (code === 39)) {
        if (sbClient.isDisplayHelp) {
          return;
        }
        event.preventDefault;
        this.moveSlide(1);
      }
      if ((code === 8) || (code === 37)) {
        if (sbClient.isDisplayHelp) {
          return;
        }
        event.preventDefault;
        this.moveSlide(-1);
      }
      if ((ctrl || cmd) && shift && code === 191) {
        event.preventDefault;
        return this.dispHelp();
      }
    },
    moveSlide: function(direction) {
      var next, nextpage, obj;
      if (sbClient.lock) {
        return;
      }
      nextpage = sbClient.page.current + direction;
      next = this.collection.at(nextpage);
      if (next) {
        obj = {
          name: 'move',
          data: {
            direction: direction,
            currentPage: sbClient.page.current
          }
        };
        $('body').trigger('execEmit', obj);
        sbClient.lock = true;
        switch (sbClient.option.animation) {
          case 'horizontal':
            horizontalMove(direction, nextpage);
            break;
          case 'vertical':
            verticalMove(direction, nextpage);
            break;
          case 'fade':
            fadeMove(next);
            break;
          default:
            fadeMove(next);
        }
        sbClient.page.current = nextpage;
        return sbClient.lock = false;
      }
    },
    execMove: function(data) {
      if (data.currentPage === sbClient.page.current) {
        return this.moveSlide(data.direction);
      }
    },
    dispHelp: function() {
      console.log("Help!");
      if (sbClient.isDisplayHelp) {
        $('#help').removeClass('disp').addClass('hide');
        return sbClient.isDisplayHelp = false;
      } else {
        $('#help').removeClass('hide').addClass('disp');
        return sbClient.isDisplayHelp = true;
      }
    }
  });

  resizeSlide = function() {
    return $('.slide').each(function() {
      return $(this).css({
        'height': $(window).height() - 72,
        'width': $(window).width() - 72
      });
    });
  };

  fadeMove = function(slide) {
    $('.slide').fadeOut(250, function() {
      $('.slide').empty();
      return $('.slide').append(slide.get('elements'));
    });
    return $('.slide').fadeIn(500, function() {
      return sbClient.lock = false;
    });
  };

  slideMove = function(x, y, z, direction, nextpage) {
    if (direction < 0) {
      direction += 1;
    }
    return $('#wrap > .slide').each(function(i, e) {
      var css, xx, yy, zz;
      xx = x * (i - nextpage);
      yy = y * (i - nextpage);
      zz = z * (i - nextpage);
      css = {
        "transform": "translate3d(" + xx + "px," + yy + "px," + zz + "px)"
      };
      return $(e).css(css);
    });
  };

  horizontalMove = function(direction, nextpage) {
    slideMove($(window).width(), 0, 0, direction, nextpage);
    return sbClient.lock = false;
  };

  verticalMove = function(direction, nextpage) {
    slideMove(0, $(window).height(), 0, direction, nextpage);
    return sbClient.lock = false;
  };

  sbClient.Model.Plugin = Backbone.Model.extend({
    defaults: {
      name: '',
      callback: '',
      element: '',
      initialScript: function() {}
    }
  });

  sbClient.plugins.serverpush = new sbClient.Model.Plugin({
    name: "serverpush",
    element: "<div id='#serverpush' class='pluginOption'>\n  <input type='checkbox' name='serverpushCheck' value='enable' checked>ServerPush\n</div>",
    initialScript: function() {
      return $('[name="serverpushCheck"]').bind('change', function() {
        return sbClient.pushMethods.serverpush = $(this).attr("checked") === "checked";
      });
    }
  });

  sbClient.Collection.Plugins = Backbone.Collection.extend({
    model: sbClient.Model.Plugin,
    fetch: function() {
      var self;
      self = this;
      return _.each(sbClient.plugins, function(plugin) {
        self.add(plugin);
        return sbClient.pushMethods[plugin.get('name')] = true;
      });
    }
  });

  sbClient.View.PluginView = Backbone.View.extend({
    el: $('#help'),
    initialize: function() {
      var self;
      console.log("initialize plugins");
      self = this;
      this.collection = new sbClient.Collection.Plugins();
      _.bindAll(this, 'render');
      this.collection.on('add', function(plugin) {
        return self.render(plugin);
      });
      return this.collection.fetch();
    },
    render: function(plugin) {
      var script;
      $('#help').append(plugin.get('element'));
      script = plugin.get('initialScript');
      return script();
    }
  });

  sbClient.View.PluginView.prototype.setPlugin = function(plugin) {
    return this.collection.add(plugin);
  };

  socket = typeof io !== "undefined" && io !== null ? io.connect("http://" + location.host) : void 0;

  if (socket != null) {
    socket.on('error', function(reason) {
      return console.error('Unable to connect Socket.IO', reason);
    });
  }

  if (socket != null) {
    socket.on('connect', function() {
      console.log('client connected');
      $('body').on('execEmit', function(event, obj) {
        return socket.emit(obj.name, obj);
      });
      socket.on('users', function(userList) {
        return setUserList(userList);
      });
      socket.on('move', function(obj) {
        if (!isEnableServerPush('move')) {
          return false;
        }
        return move(obj);
      });
      socket.on('plugin', function(obj) {
        var func;
        if (!obj.plugin || !obj.plugin.name) {
          return false;
        }
        if (!isEnableServerPush(obj.plugin.name)) {
          return false;
        }
        func = sbClient.plugins[obj.plugin.name].get("callback") || {};
        return func(obj.data);
      });
      return socket.on('disconnect', function() {
        $('body').off('execEmit');
        return console.log('disconnected Bye!');
      });
    });
  }

  $(function() {
    resizeSlide();
    $(window).bind('resize', function() {
      return resizeSlide();
    });
    return $('a').bind('click', function(e) {
      e.stopPropagation();
      e.preventDefault();
      return window.open(this.href, '_blank');
    });
  });

}).call(this);
